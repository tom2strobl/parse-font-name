{"version":3,"file":"index.mjs","sources":["../src/dice.ts","../src/index.ts"],"sourcesContent":["/*\nMIT License\n\nCopyright (c) 2018 Akash Kurdekar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n// https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient\n\n// NOTE: dice works better than levenshtein for our usecase\n\nexport function compareTwoStrings(first: string, second: string) {\n  first = first.replace(/\\s+/g, '')\n  second = second.replace(/\\s+/g, '')\n\n  if (first === second) return 1 // identical or empty\n  if (first.length < 2 || second.length < 2) return 0 // if either is a 0-letter or 1-letter string\n\n  let firstBigrams = new Map()\n  for (let i = 0; i < first.length - 1; i++) {\n    const bigram = first.substring(i, i + 2)\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1\n\n    firstBigrams.set(bigram, count)\n  }\n\n  let intersectionSize = 0\n  for (let i = 0; i < second.length - 1; i++) {\n    const bigram = second.substring(i, i + 2)\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0\n\n    if (count > 0) {\n      firstBigrams.set(bigram, count - 1)\n      intersectionSize++\n    }\n  }\n\n  return (2.0 * intersectionSize) / (first.length + second.length - 2)\n}\n","import { compareTwoStrings } from './dice'\n\n// raw map data export in case you want to manually do stuff with it\n\n// I compiled this list from various sources including adobe, microsoft, java standard libraries and added lots of custom weights I encountered\nexport const numericFontWeightMap = {\n  100: ['Thin', 'UltraThin', 'ExtraThin', 'Hairline', 'Flyweight'],\n  200: ['ExtraLight', 'ExtraLite', 'UltraLight', 'Extraleicht', 'Bantamweight'],\n  300: ['Light', 'Lite', 'Leicht', 'Blond', 'Featherweight'],\n  400: ['Regular', 'Normal', 'Book', 'Roman', 'Text', 'Display', 'Buch', 'Lightweight'],\n  500: ['Medium', 'Dark', 'Demi', 'Thick', 'Kräftig', 'Welterweight'],\n  600: ['SemiBold', 'DemiBold', 'ExtraThick', 'ExtraDark', 'Halbfett', 'Middleweight'],\n  700: ['Bold', 'Dreiviertelfett', 'Fett', 'Large', 'Headline', 'Cruiserweight'],\n  800: ['ExtraBold', 'UltraBold', 'Heavyweight'],\n  900: ['Black', 'Heavy', 'ExtraBlack', 'UltraBlack', 'Fat', 'Poster', 'Extrafett', 'Sumo']\n} as const\n\n// function overloading to allow for either a single string or an array of strings\nexport function parseNumericWeightFromName(fontStrings: string[], fallbackValue?: number): number[]\nexport function parseNumericWeightFromName(fontStrings: string, fallbackValue?: number): number\n\n/**\n * Takes a single or array of font name strings and returns the numeric weight or the fallbackValue if not found.\n * eg. 'Helvetica Neue SemiBold' => 600\n *\n * @param {string | string[]} fontStrings A single string or array of font name strings to parse\n * @param {number} [fallbackValue=400] Optional fallback value to return if no numeric weight is found\n * @returns number | number[]\n */\nexport function parseNumericWeightFromName(fontStrings: string | string[], fallbackValue = 400) {\n  // check for complete input\n  if (!fontStrings) {\n    throw new Error('no fontStrings provided')\n  }\n  // normalize single argument\n  if (typeof fontStrings === 'string') {\n    fontStrings = [fontStrings]\n  }\n  // iterate over the input\n  const results = fontStrings.map((item) => {\n    // matches if in the string there is a full number of 100-900, no X50 and no 1000\n    // 1-9 means no 0 at the start, 00 means always followed by exactly two zeroes\n    // and \\b matches a word boundary, so 4th digits, end of lines or other chars are not matched\n    const tripleDigitInName = item.match(/[1-9]00\\b/gi)\n    // convert map to multi-dimensional array to work better\n    const fontMap = Object.entries(numericFontWeightMap)\n    // find all matching weights\n    const weights: [string, number][] = fontMap\n      // filter out all the font weights that match the font string; Note using RegExp.test yields false positives\n      .filter((pair) => pair[1].some((value) => item.toLowerCase().includes(value.toLowerCase())))\n      // get the closest distance of the matches\n      .map((pair) => {\n        const [numeric, names] = pair\n        const distances = names.map((name) => compareTwoStrings(item, name) as number)\n        return [numeric, Math.min(...distances)]\n      })\n    // if we have one or more matches, return the one with the highest similarity\n    if (weights.length) {\n      const [closestNumeric] = weights.reduce((a, b) => (a[1] < b[1] ? b : a))\n      return parseInt(closestNumeric, 10)\n      // if there was no string match...\n    } else if (tripleDigitInName && tripleDigitInName.length > 0) {\n      // ...and we have a triple digit number in the name, return that\n      return parseInt(tripleDigitInName[0], 10)\n    }\n    // otherwise return the fallback value\n    return fallbackValue\n  })\n  // return single value if only one font string provided\n  return results.length === 1 ? (results.pop() as number) : results\n}\n\ntype FontStyleCSSString = 'normal' | 'oblique' | 'italic'\n\n// function overloading to allow for either a single string or an array of strings and the correct fallbackValue depending on the format\nexport function parseStyleFromName(\n  fontStrings: string,\n  format?: 'cssString',\n  fallbackValue?: FontStyleCSSString\n): FontStyleCSSString\nexport function parseStyleFromName(\n  fontStrings: string[],\n  format?: 'cssString',\n  fallbackValue?: FontStyleCSSString\n): FontStyleCSSString[]\nexport function parseStyleFromName(fontStrings: string, format?: 'boolean', fallbackValue?: boolean): boolean\nexport function parseStyleFromName(fontStrings: string[], format?: 'boolean', fallbackValue?: boolean): boolean[]\n\n/**\n * Takes a single or array of font name strings and returns, depending on desired format, either a boolean or the css font-style setting – or the fallbackValue if not found.\n * eg. 'Helvetica Neue Regular Italic' => 'italic'\n *\n * @param {string | string[]} fontStrings A single string or array of font name strings to parse\n * @param {'cssString' | 'boolean'} [format='cssString'] To return either true/false if italic or oblique or a css font-style setting of normal, italic or oblique\n * @param {'normal' | 'oblique' | 'italic' | boolean} [fallbackValue=false] Optional fallback value to return if parsing fails\n * @returns\n */\nexport function parseStyleFromName(\n  fontStrings: string | string[],\n  format = 'cssString',\n  fallbackValue?: FontStyleCSSString | boolean\n) {\n  // check for complete input\n  if (!fontStrings) {\n    throw new Error('no fontStrings provided')\n  }\n  // normalize single argument\n  if (typeof fontStrings === 'string') {\n    fontStrings = [fontStrings]\n  }\n  // if no fallbackValue was provided, use one depending on the format provided\n  if (!fallbackValue && format === 'boolean') {\n    fallbackValue = false\n  } else if (!fallbackValue && format === 'cssString') {\n    fallbackValue = 'normal'\n  }\n  // iterate over inputs\n  const results = fontStrings.map((item) => {\n    // check if our keywords italic or oblique match\n    if (item.toLowerCase().includes('italic') || item.toLowerCase().includes('kursiv')) {\n      return format === 'boolean' ? true : 'italic'\n    } else if (item.toLowerCase().includes('oblique') || item.toLowerCase().includes('schräg')) {\n      return format === 'boolean' ? true : 'oblique'\n    }\n    return fallbackValue\n  })\n  // return single value if only one font string provided\n  return results.length === 1 ? (results.pop() as FontStyleCSSString | boolean) : results\n}\n"],"names":[],"mappings":"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"}