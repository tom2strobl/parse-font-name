{"version":3,"file":"index.mjs","sources":["../src/levenshtein.js","../src/index.ts"],"sourcesContent":["/*\nCopyright (c) 2011 Andrei Mackenzie\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// Compute the edit distance between the two given strings\nexport function getStringDistance(a, b) {\n  if (a.length == 0) return b.length\n  if (b.length == 0) return a.length\n\n  var matrix = []\n\n  // increment along the first column of each row\n  var i\n  for (i = 0; i <= b.length; i++) {\n    matrix[i] = [i]\n  }\n\n  // increment each column in the first row\n  var j\n  for (j = 0; j <= a.length; j++) {\n    matrix[0][j] = j\n  }\n\n  // Fill in the rest of the matrix\n  for (i = 1; i <= b.length; i++) {\n    for (j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) == a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1]\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1, // substitution\n          Math.min(\n            matrix[i][j - 1] + 1, // insertion\n            matrix[i - 1][j] + 1\n          )\n        ) // deletion\n      }\n    }\n  }\n\n  return matrix[b.length][a.length]\n}\n","import { getStringDistance } from './levenshtein'\n\n// raw map data export in case you want to manually do stuff with it\n\n// I compiled this list from various sources including adobe, microsoft, java standard libraries and added lots of custom weights I encountered\nexport const numericFontWeightMap = {\n  100: ['Thin', 'UltraThin', 'ExtraThin', 'Hairline', 'Flyweight'],\n  200: ['ExtraLight', 'ExtraLite', 'UltraLight', 'Extraleicht', 'Bantamweight'],\n  300: ['Light', 'Lite', 'Leicht', 'Blond', 'Featherweight'],\n  400: ['Regular', 'Normal', 'Book', 'Roman', 'Text', 'Display', 'Buch', 'Lightweight'],\n  500: ['Medium', 'Dark', 'Demi', 'Thick', 'Kräftig', 'Welterweight'],\n  600: ['SemiBold', 'DemiBold', 'ExtraThick', 'ExtraDark', 'Halbfett', 'Middleweight'],\n  700: ['Bold', 'Dreiviertelfett', 'Fett', 'Large', 'Headline', 'Cruiserweight'],\n  800: ['ExtraBold', 'UltraBold', 'Heavyweight'],\n  900: ['Black', 'Heavy', 'ExtraBlack', 'UltraBlack', 'Fat', 'Poster', 'Extrafett', 'Sumo']\n} as const\n\n// function overloading to allow for either a single string or an array of strings\nexport function parseNumericWeightFromName(fontStrings: string[], fallbackValue?: number): number[]\nexport function parseNumericWeightFromName(fontStrings: string, fallbackValue?: number): number\n\n/**\n * Takes a single or array of font name strings and returns the numeric weight or the fallbackValue if not found.\n * eg. 'Helvetica Neue SemiBold' => 600\n *\n * @param {string | string[]} fontStrings A single string or array of font name strings to parse\n * @param {number} [fallbackValue=400] Optional fallback value to return if no numeric weight is found\n * @returns number | number[]\n */\nexport function parseNumericWeightFromName(fontStrings: string | string[], fallbackValue = 400) {\n  // check for complete input\n  if (!fontStrings) {\n    throw new Error('no fontStrings provided')\n  }\n  // normalize single argument\n  if (typeof fontStrings === 'string') {\n    fontStrings = [fontStrings]\n  }\n  // iterate over the input\n  const results = fontStrings.map((item) => {\n    // convert map to multi-dimensional array to work better\n    const fontMap = Object.entries(numericFontWeightMap)\n    // find all matching weights\n    const weights: [string, number][] = fontMap\n      // filter out all the font weights that match the font string; Note using RegExp.test yields false positives\n      .filter((pair) => pair[1].some((value) => item.includes(value)))\n      // get the closest distance of the matches\n      .map((pair) => {\n        const [numeric, names] = pair\n        const distances = names.map((name) => getStringDistance(item, name) as number)\n        return [numeric, Math.min(...distances)]\n      })\n    // if we have one ore more matches, return the one with the lowest distance (Light is further away from ExtraLight than ExtraLight)\n    if (weights.length) {\n      const [closestNumeric] = weights.reduce((a, b) => (a[1] < b[1] ? a : b))\n      return parseInt(closestNumeric, 10)\n    }\n    // otherwise return the fallback value\n    return fallbackValue\n  })\n  // return single value if only one font string provided\n  return results.length === 1 ? (results.pop() as number) : results\n}\n\ntype FontStyleCSSString = 'normal' | 'oblique' | 'italic'\n\n// function overloading to allow for either a single string or an array of strings and the correct fallbackValue depending on the format\nexport function parseStyleFromName(\n  fontStrings: string,\n  format?: 'cssString',\n  fallbackValue?: FontStyleCSSString\n): FontStyleCSSString\nexport function parseStyleFromName(\n  fontStrings: string[],\n  format?: 'cssString',\n  fallbackValue?: FontStyleCSSString\n): FontStyleCSSString[]\nexport function parseStyleFromName(fontStrings: string, format?: 'boolean', fallbackValue?: boolean): boolean\nexport function parseStyleFromName(fontStrings: string[], format?: 'boolean', fallbackValue?: boolean): boolean[]\n\n/**\n * Takes a single or array of font name strings and returns, depending on desired format, either a boolean or the css font-style setting – or the fallbackValue if not found.\n * eg. 'Helvetica Neue Regular Italic' => 'italic'\n *\n * @param {string | string[]} fontStrings A single string or array of font name strings to parse\n * @param {'cssString' | 'boolean'} [format='cssString'] To return either true/false if italic or oblique or a css font-style setting of normal, italic or oblique\n * @param {'normal' | 'oblique' | 'italic' | boolean} [fallbackValue=false] Optional fallback value to return if parsing fails\n * @returns\n */\nexport function parseStyleFromName(\n  fontStrings: string | string[],\n  format = 'cssString',\n  fallbackValue?: FontStyleCSSString | boolean\n) {\n  // check for complete input\n  if (!fontStrings) {\n    throw new Error('no fontStrings provided')\n  }\n  // normalize single argument\n  if (typeof fontStrings === 'string') {\n    fontStrings = [fontStrings]\n  }\n  // if no fallbackValue was provided, use one depending on the format provided\n  if (!fallbackValue && format === 'boolean') {\n    fallbackValue = false\n  } else if (!fallbackValue && format === 'cssString') {\n    fallbackValue = 'normal'\n  }\n  // iterate over inputs\n  const results = fontStrings.map((item) => {\n    // check if our keywords italic or oblique match\n    if (item.toLowerCase().includes('italic') || item.toLowerCase().includes('kursiv')) {\n      return format === 'boolean' ? true : 'italic'\n    } else if (item.toLowerCase().includes('oblique') || item.toLowerCase().includes('schräg')) {\n      return format === 'boolean' ? true : 'oblique'\n    }\n    return fallbackValue\n  })\n  // return single value if only one font string provided\n  return results.length === 1 ? (results.pop() as FontStyleCSSString | boolean) : results\n}\n"],"names":[],"mappings":"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"}